첫째. 매트랩은 공학도용 엑셀 같은거다.
네가 그걸 공부하면서 지루했다면 그래프를 플로팅하건 시뮬레이션을 하건
네 필요에 맞는 툴을 몇 가지 익혀서 짜집기 해야 할거다.
즉, 그걸 열심히 공부한 아이들이 계산기 두드릴때 넌 주판 튕겨야 할거야.
그도 아니면 계산기나 주판을 깎아서 만들고 있어야하겠지.

둘째. 종이에 연필로 써서 문제를 푸는건
최대한 도구에 구애받지 않고 머릿속의 생각을 원시적 optical storage 정도의
도움 만으로 풀어낼 수 있다는걸 증명해 보이는거다.
즉, 네가 문제를 다루는 방식에 익숙해져 있다는걸 보이는거다.
그 말은 네가 언제 어느곳에 있어도 문제를 풀 수 있는 사람이 되는거다.

셋째. 프로그래밍은 학문 공부와 다르다.
공부를 곧잘 한다고 해서 네 적성에 맞는지 타인이 알 수 없을 뿐 더러,
너 스스로도 바로는 알 수 없다.
해 봐야 아는 거다. 답은 간단하다.
충분히 해 볼 시간이 없으면 짧은 시간에 존나게 해보는 수 밖에 없다.

넷째. 한국 나이로 스물 다섯. 충분히 젊다.
얼마를 투자해서 어떻게 살아갈지 네 인생 설계를 하는 것은
어떻게 보면 계산적이고, 어떻게 보면 구체적인 경험을 하는 것인데,
비교적 구체적인 경험을 일찍 하게 된 것에 대해 축하한다.
셋째 항목 이어서 다시 한번 환기해 주는데,
프로그래밍의 세계는 학위가 네 지위를 곤고히 해 주지 않는다.
학위가진 병신과 학위없는 천재가 극명하게 비교되는 분야다.
즉 학위보다는 니가 어떻게 해 내느냐에 달렸다.
그러므로 소프트웨어 개발 계통으로 들어가기 위해
2천만원을 투자하고 안하고는 순전히 네 선택이다.

다섯째. 학교에서 가르치는 커리큘럼은 네게 딱 맞을 수 없다.
그건 기성복이다. 맞춤옷 같을 수가 없다.
네겐 2000만원이 큰 돈이겠지만,
어느 소프트웨어 마스터가 너만을 위해 2년동안 헌신하며
2000만원을 급여로 가져가겠냐?
니가 교육과정을 통해 갖고 가게 될 감정은,
수업을 따라가지 못하게 되어 느끼는 좌절감이거나
동기녀석들의 멍청함을 지켜보며 느끼는 자만일 수 있다.
그럭저럭 따라가는 그런거...
내가 보기엔 소프트웨어 개발에선 존재하지 않는다.
대신 동기들끼리 정보를 교환하고 같은 고민을 나누고
그런건 도움이 될지도 모르겠다.
독학하면 네 진도를 네가 조절할 수 있고, 특별히 자만할 일도 없겠지.

여섯째. 무얼하든 어제의 너를 이길 각오가 필요하다.
게임? 접어라. 그건 모르핀 같은거다. 널 더 병들게 할거야.
특히나 지금의 너처럼 너를 발견하지 못해 하루 하루 걱정만 쌓이는 애에겐
게임은 더이상 게임이 아니다.
매일 일기를 써라. 자기 전 30분.
니가 하룻동안 잘 한 일과 허비한 사실에 대해 일기를 써라.
1, 2, 3, 4. 번호를 붙여서 한 줄씩 명확하게 적어라.
그리고 허비한 사실들에 대해 다음날은 절대 반복하지 마라.
누워서 잠들때 까지, 내일 무엇을 하면 좋을지,
좋은 아이디어들과 도전해볼거리들을 생각해라.
일어나서 샤워하며 20분, 오늘 할 일들의 순서를 정해라.
정했으면 거침없이 해라.
아마츄어와 프로의 첫 번째 차이는
숨을 쉬는 것 조차 낭비일 듯 보이는 집중력이다.
이음매 없이(seamless) 계획한대로 시간을 보내라.
쉴 때 어떻게 쉬면 휴식의 효율이 좋은지 고민해보는 것도 좋다.

그럼 성공할거야. 무얼하든.

니가 대학원을 다니면서도 프로그래밍은 공부할 수 있다.
석사 학위와 프로그래밍 고수, 둘 다 잡을 수 있다는 거다.

선택은 니가.
생각이 안되면 생각하는 법 부터,
계획이 잘 실행안되면 계획하는 법 부터 다듬어라.
